#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        ORG     0FFE0h
        DW      TIMER1_A1_ISR

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE  
                  ; place program in 'CODE' segment

TIMER1_A1_ISR:
        add.w   R6,PC
        jmp     UP_DOWN_MODE
        jmp     LEFT_RIGHT_MODE
UP_DOWN_MODE:

        cmp.w #1,R5
        jz      UP
        sub.w   #1,&TA0CCR3
        cmp.w   #48,&TA0CCR3
        jz      DOWN_END
        jmp UP_DOWN_OUT
DOWN_END:
        mov.w #1,R5
        jmp UP_DOWN_OUT
        
UP:
        add.w   #1,&TA0CCR3
        cmp.w   #54,&TA0CCR3
        jz      UP_END
        jmp     UP_DOWN_OUT
UP_END
        mov.w   #0,R5
        mov.w   #2,R6
        jmp     UP_DOWN_OUT
        
UP_DOWN_OUT:
        mov.w   #61000,TA1R
        
        bic.w   #00000001b,TA1CTL            ;clearing the TAIFG (flag)
        reti
        
LEFT_RIGHT_MODE:

        cmp.w #1,R5
        jz      RIGHT
        sub.w   #1,&TA0CCR4
        cmp.w   #36,&TA0CCR4
        jz      LEFT_END
        jmp LEFT_RIGHT_OUT
LEFT_END:
        mov.w #1,R5
        jmp LEFT_RIGHT_OUT
        
RIGHT:
        add.w   #1,&TA0CCR4
        cmp.w   #43,&TA0CCR4
        jz      RIGHT_END
        jmp     LEFT_RIGHT_OUT
RIGHT_END
        mov.w   #0,R5
        mov.w   #0,R6
        jmp     LEFT_RIGHT_OUT
        
LEFT_RIGHT_OUT:
        mov.w   #61000,TA1R
        
        bic.w   #00000001b,TA1CTL            ;clearing the TAIFG (flag)
        reti

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        clr.w R5
        
        ;LED setup
        bis.b   #00110000b,&P1SEL       //system module
        bis.b   #00110000b,&P1DIR
     
        ;TimerA setupl
        mov.w   #TASSEL_1+MC_1+TACLR,&TA0CTL // ACLK, up mode  
        mov.w   #100,&TA0CCR0
        mov.w   #OUTMOD_7, &TA0CCTL3    //pwm output
        mov.w   #OUTMOD_7, &TA0CCTL4
        mov.w   #51,&TA0CCR3
        mov.w   #39,&TA0CCR4
        mov.w   #0,R6
        
        mov.w   #0000000100100110b,&TA1CTL // ACLK, contmode, set TAIE
        mov.w   #61000,TA1R
        nop
        bis.w   #GIE,SR
        nop        
        
        
        bic.b #00001100b,&P1SEL
        bis.b #00001100b,&P1DIR
        bic.b #00001100b,&P1OUT
        bic.b #00110000b,&P2SEL
        bis.b #00110000b,&P2DIR
        bis.b #00110000b,&P2OUT
        
LOOP0:
        bic.b #00110000b,&P2OUT
        bic.b #00001100b,&P1OUT  ;clr AB A'B'
        bis.b #00000100b,&P1OUT  ;SET AB
        ;----------------
        mov.w #1800,R7
LOOP1:
        sub.w #1,R7
        jnz LOOP1
        ;----------------
        bic.b #00110000b,&P2OUT
        bic.b #00001100b,&P1OUT  ;clr AB A'B'
        bis.b #00001000b,&P1OUT  ;SET BA'
        ;----------------
        mov.w #1800,R7
LOOP2:
        sub.w #1,R7
        jnz LOOP2
        ;----------------
        bic.b #00110000b,&P2OUT
        bic.b #00001100b,&P1OUT  ;clr AB A'B'
        bis.b #00010000b,&P2OUT  ;SET A'B'
        ;----------------
        mov.w #1800,R7
LOOP3:
        sub.w #1,R7
        jnz LOOP3
        ;----------------
        bic.b #00110000b,&P2OUT
        bic.b #00001100b,&P1OUT  ;clr AB A'B'
        bis.b #00100000b,&P2OUT  ;SET B'A
        ;----------------
        mov.w #1800,R7
LOOP4:
        sub.w #1,R7
        jnz LOOP4
        ;----------------
        jmp LOOP0
        
        
        END
