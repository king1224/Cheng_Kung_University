#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
        
        ORG     0FFE0h
        DW      TIMER1_A1_ISR

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment
        
TIMER1_A1_ISR:
        add.w   #2,R4
        add.w   R4,PC
        nop
        jmp LED1;1
        jmp LED2;2
        jmp LED3;3
        jmp LED4;4
        jmp LED5;5
        jmp LED6;6
        jmp RESTART
        
LED1:
        xor.b   #00000100b,&P1OUT
        mov.w   #65036,TA1R
        reti
LED2:
        xor.b   #00001000b,&P1OUT
        mov.w   #64536,TA1R
        reti
LED3:
        xor.b   #00010000b,&P1OUT
        mov.w   #64036,TA1R
        reti
LED4:
        xor.b   #00100000b,&P1OUT
        mov.w   #63136,TA1R
        reti
LED5:
        xor.b   #00010000b,&P2OUT
        mov.w   #62236,TA1R
        reti
LED6:
        xor.b   #00100000b,&P2OUT
        mov.w   #65036,TA1R
        reti
RESTART:
        bis.b   #00111100b,&P1OUT
        bis.b   #00110000b,&P2OUT
        clr     R4
        mov.w   #65530,TA1R
        reti

init:   MOV     #SFE(CSTACK), SP        ; set up stack



main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        clr     R4
        
        bic.b   #00111100b,&P1SEL
        bic.b   #00110000b,&P2SEL
        bis.b   #00111100b,&P1DIR
        bis.b   #00110000b,&P2DIR
        bis.b   #00111100b,&P1OUT
        bis.b   #00110000b,&P2OUT
        
        mov.w   #0000000100100110b,&TA1CTL
        mov.w   #65036,TA1R
        
        
        nop
        bis.w   #GIE,SR
        
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        END
